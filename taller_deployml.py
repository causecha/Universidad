# -*- coding: utf-8 -*-
"""Taller_DeployML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U8CsDXumaix3g22vU1Lq9lNWsdQkZS-6
"""

!pip install scikit-learn==1.0

import sklearn 
sklearn.__version__

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Montamos unidad de drive
from google.colab import drive
drive.mount('/content/drive')

# Copiar los archivos a la ruta content
!cp "/content/drive/MyDrive/modelos/heart.csv" "/content"

# Cargamos dataset
dfdata = pd.read_csv('heart.csv')
dfdata.head()

dfdata.count()

dfdata.tail()

dfdata.isnull().sum()

dfdata.describe()

sns.countplot(x=dfdata['target'])
plt.xticks(x=dfdata['target'].unique())
plt.show()

labels=['Sano', 'Enfermo']
labels

X = dfdata.loc[:,'age':'thal']
Y = dfdata.loc[:,'target']

#X
#Y 

X = np.asarray(X)
Y = np.asarray(Y)

X.shape, Y.shape

from sklearn.model_selection import train_test_split

xtrain, xtest, ytrain, ytest = train_test_split(X,Y, test_size = 0.2,random_state = 42)

xtrain.shape, xtest.shape, ytrain.shape, ytest.shape

"""Random Forest"""

from sklearn.ensemble import RandomForestClassifier

Rf_model = RandomForestClassifier(n_estimators = 500, random_state = 44)

Rf_model.fit(xtrain, ytrain)

from mlxtend.plotting import plot_confusion_matrix
from sklearn.metrics import confusion_matrix
from sklearn import metrics

ypred = Rf_model.predict(xtest)
matriz = confusion_matrix(ytest,ypred)
plot_confusion_matrix(conf_mat = matriz,figsize=(6,6),show_normed=False)
plt.tight_layout()
print(metrics.classification_report(ytest,ypred,digits = 4))

"""SVM"""

from sklearn.svm import SVC

SVC_model = SVC(kernel = 'rbf')

SVC_model.fit(xtrain, ytrain)

from mlxtend.plotting import plot_confusion_matrix
from sklearn.metrics import confusion_matrix
from sklearn import metrics

ypred = SVC_model.predict(xtest)
matriz = confusion_matrix(ytest,ypred)
plot_confusion_matrix(conf_mat = matriz,figsize=(6,6),show_normed=False)
plt.tight_layout()
print(metrics.classification_report(ytest,ypred,digits = 4))

import pickle 

pkl_filename= "modelo.pkl"
with open(pkl_filename,'wb') as file:
  pickle.dump(SVC_model,file)